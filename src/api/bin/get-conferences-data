#!/usr/bin/env node

const database = require('../src/database');
const co = require('co');
const { stringify } = require('querystring');
const _ = require('lodash');
const fetch = require('node-fetch');
const { conferenceModel, resourceModel } = require('../src/model/index');
const { COLLECTORS_ADDRESS } = require('../config');

const FETCH_SETTINGS = {
  timeout: 10000,
};

const composeUrl = ({ pathname, query }) => {
  let url = `${COLLECTORS_ADDRESS}${pathname}`;

  if (query) {
    url += `?${stringify(query)}`;
  }

  return url;
};

const createRequest = params =>
  fetch(composeUrl(params), FETCH_SETTINGS)
    .then(response => response.json());

function getTwitterData(awesomeResources) {
  const pathname = '/resource/twitter';
  const users = awesomeResources.map(({ twitterId }) => twitterId);
  const requests = _.chunk(users, 100).map(screenName =>
      createRequest({ pathname, query: { screenName } }));

  return Promise
    .all(requests)
    .then(data => [].concat(...data));
}

function getAwesomeList() {
  const pathname = '/resource/awesomelist';

  return createRequest({ pathname });
}

function storeConferences(awesomeListResources) {
  const conferences = Object.keys(
      awesomeListResources.reduce((result, { name }) =>
        Object.assign({}, result, { [name]: name }), {}))
    .map(name => ({ name }));
  return conferenceModel.insertMany(conferences);
}

function *getData() {
  const awesomeListResources = yield getAwesomeList();
  const twitterResources = yield getTwitterData(awesomeListResources);

  return [awesomeListResources, twitterResources];
}

const prepareResourceData = resourceName =>
  rawData =>
    findFn =>
      resourceInfoFn =>
        rawData.reduce((result, data) => {
          const conferenceId = findFn(data);
          const resourceInfo = resourceInfoFn(data);
          return [].concat(result, conferenceId
            ? Object.assign({},
              { conferenceId, data, resourceName, resourceInfo })
            : []);
        }, []);

function *storeData([awesomeListResources, twitterResources]) {
  const conferences = yield storeConferences(awesomeListResources);
  const awesomeListData = prepareResourceData(
    'AWESOMELIST')(
      awesomeListResources)(
        ({ name }) => {
          const {
            id: conferenceId,
          } = conferences.find(d => d.name === name) || {};

          return conferenceId;
        })(() => 'awc');
  const twitterData = prepareResourceData(
    'TWITTER')(
      twitterResources)(
        ({ screen_name: id }) => {
          const { conferenceId } = awesomeListData
            .find(({ data: { twitterId } }) =>
              twitterId === id) || {};
          return conferenceId;
        })(({ screen_name: twitterId }) => ({ twitterId }));

  yield resourceModel.insertMany([].concat(awesomeListData, twitterData));
  yield conferenceModel.updateDetails(conferences);
  return conferences;
}

database({
  onConnect() {
    co(getData)
      .then(co.wrap(storeData))
      .then(data => {
        console.log(`Filled with ${data.length} items.`);
        process.exit(0);
      })
      .catch(err => {
        console.error(err);
        process.exit(1);
      });
  },
  onError(err) {
    console.error(err);
    process.exit(1);
  }
});
