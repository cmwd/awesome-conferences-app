#!/usr/bin/env node

require('../src/database');
const co = require('co');
const { stringify } = require('querystring');
const _ = require('lodash');
const fetch = require('node-fetch');
const { conferenceModel, resourceModel } = require('../src/model/index');

const FETCH_SETTINGS = {
  timeout: 10000,
};

const composeUrl = ({ pathname, query }) => {
  let url = `${process.env.COLLECTORS_ADDRESS}${pathname}`;

  if (query) {
    url += `?${stringify(query)}`;
  }

  return url;
};

const createRequest = params =>
  fetch(composeUrl(params), FETCH_SETTINGS)
    .then(response => response.json());

function storeTwitterResources(twitterResources) {
  const resourceName = 'TWITTER';
  const resources = twitterResources.map(data => {
    const { screen_name: userId } = data;
    return { resourceName, userId, data };
  });

  return resourceModel.insertMany(resources);
}

function storeAwesomeListResources(awesomeResources) {
  const resourceName = 'AWESOMELIST';
  const resources = awesomeResources.map(data => {
    const { twitterId: userId } = data;
    return { resourceName, userId, data };
  });

  return resourceModel.insertMany(resources);
}

function getTwitterData(awesomeResources) {
  const pathname = '/resource/twitter';
  const users = awesomeResources.map(({ twitterId }) => twitterId);
  const requests = _.chunk(users, 100).map(screenName =>
      createRequest({ pathname, query: { screenName } }));

  return Promise
    .all(requests)
    .then(data => [].concat(...data));
}

function getAwesomeList() {
  const pathname = '/resource/awesomelist';

  return createRequest({ pathname });
}

function findTwitterResoure(twitterId, twitterResources) {
  const resource = twitterResources
    .find(({ data: { screen_name: id } }) => id === twitterId);
  return resource || { data: {} };
}

function createConferenceData([awesomeList, twitter]) {
  return awesomeList.map(awesomeResource => {
    const { region, url, name, twitterId } = awesomeResource.data;
    const twitterResource = findTwitterResoure(twitterId, twitter);
    const {
      description = '',
      location = '',
      profile_banner_url: banner = '',
    } = twitterResource.data;
    const resources = [awesomeResource, twitterResource];

    return { name, url, description, region, location, banner, resources };
  });
}

function *getData() {
  const awesomeListResources = yield getAwesomeList();
  const twitterResources = yield getTwitterData(awesomeListResources);

  return [awesomeListResources, twitterResources];
}

function *storeData([awesomeListResources, twitterResources]) {
  const awesomeList = yield storeAwesomeListResources(awesomeListResources);
  const twitter = yield storeTwitterResources(twitterResources);
  const data = createConferenceData([awesomeList, twitter]);

  return conferenceModel.insertMany(data);
}

co(getData)
  .then(co.wrap(storeData))
  .then(data => {
    console.log(`Filled with ${data.length} items.`);
    process.exit(0);
  })
  .catch(err => {
    console.error(err);
    process.exit(1);
  });
